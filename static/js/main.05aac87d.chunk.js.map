{"version":3,"sources":["components/PDF.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["PDF","props","styles","StyleSheet","create","page","flexDirection","backgroundColor","section","border","width","height","margin","headerLogo","display","justifyContent","alignItems","marginTop","marginBottom","marginLeft","marginRight","headerIamge","headerText","color","fontWeight","headerText1","QRimage","MyDocument","size","style","src","QRsection","image","className","document","fileName","class","type","onClick","onGoBack","Post","useState","file","setFile","postSubmitted","setSostSubmitted","qrUpoladed","setQrUpoladed","useEffect","method","id","onChange","e","URL","createObjectURL","target","files","accept","getElementById","click","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05aac87d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Document, Page, Text, View, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\n\r\nconst PDF = (props) => {\r\n  const styles = StyleSheet.create({\r\n    page: {\r\n      flexDirection: 'row',\r\n      backgroundColor: '#FFF'\r\n    },\r\n    section: {\r\n      backgroundColor: '#FDD610',\r\n      border: '10px solid #FD6310',\r\n      width: '225px',\r\n      height: '340px',\r\n      margin: 10,\r\n\r\n    },\r\n    headerLogo: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center',\r\n      marginTop: '10px',\r\n      marginBottom: '10px',\r\n      marginLeft: '15px',\r\n      marginRight: '15px'\r\n    },\r\n    headerIamge: {\r\n      height: '60px'\r\n    },\r\n    headerText: {\r\n      backgroundColor: '#FD6310',\r\n      height: '40px',\r\n      color: '#fff',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      fontWeight: '800',\r\n    },\r\n    headerText1: {\r\n      fontWeight: '800',\r\n    },\r\n    QRimage: {\r\n      width: '205px',\r\n      height: '205px'\r\n    }\r\n  });\r\n\r\n  const MyDocument = () => (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page}>\r\n        <View style={styles.section}>\r\n          <View style={styles.headerLogo}>\r\n            <Image style={styles.headerIamge} src=\"ceypetco_logo.png\"></Image>\r\n            <Image style={styles.headerIamge} src=\"Lanka_IOC_logo.png\"></Image>\r\n          </View>\r\n          <View style={styles.headerText}>\r\n            <Text style={styles.headerText1}>NATIONAL FUEL PASS</Text>\r\n          </View>\r\n          <View style={styles.QRsection}>\r\n            <Image style={styles.QRimage} src={props.image}></Image>\r\n          </View>\r\n        </View>\r\n      </Page>\r\n    </Document>\r\n  );\r\n  return (\r\n    <div className='d-flex flex-column align-items-center mt-4'>\r\n      <PDFViewer height={500} width={300}>\r\n        <MyDocument />\r\n      </PDFViewer>\r\n      <PDFDownloadLink document={<MyDocument />} fileName={\"pass\"}>\r\n        <button class=\"btn btn-danger mt-4 mb-2\"> Download PDF </button>\r\n      </PDFDownloadLink>\r\n      <button type=\"button\" className=\"btn btn-secondary\" onClick={props.onGoBack}>Go back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PDF;","import React, { useState,useEffect  } from 'react';\r\nimport PDF from './PDF';\r\n\r\nfunction Post () {\r\n    const [file, setFile] = useState();\r\n    const [postSubmitted, setSostSubmitted] = useState(false);\r\n    const [qrUpoladed, setQrUpoladed] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(file){\r\n            setQrUpoladed(true);\r\n        }\r\n      }, [file]);\r\n   \r\n    const handleChange=(e)=> {\r\n        setFile(URL.createObjectURL(e.target.files[0]));\r\n        \r\n    }\r\n\r\n    const Open = () => {\r\n        document.getElementById('qr-uploader').click();\r\n    }\r\n\r\n    const GeneratePass = () => {\r\n        setSostSubmitted(true);\r\n    }\r\n    \r\n    const onGoBack=()=>{\r\n        setSostSubmitted(false);\r\n        setQrUpoladed(false);\r\n    }\r\n\r\n    \r\n        return(\r\n            <>\r\n                {  !postSubmitted ? \r\n                    (<div className=\"container\">\r\n                        <div className=\"jumbotron mt-3\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"well well-sm\">\r\n                                        <form className=\"form-horizontal\" method=\"post\">\r\n                                            <fieldset>\r\n                                                <legend className=\"text-center header\">Upload your QR Image</legend>\r\n                                                <div className=\"form-group\">\r\n                                                <input type=\"file\" id='qr-uploader' style={{ display: 'none' }} onChange={handleChange} accept=\".jpg,.jpeg,.png\"  />\r\n                                                <button type=\"button\" onClick={() => Open() } className=\"btn btn-primary btn-lg mb-4\">Upload</button>\r\n                                                </div>\r\n                                                {qrUpoladed?<div className=\"form-group\">\r\n                                                    <button type=\"button\" onClick={()=>GeneratePass()}  className=\"btn btn-success btn-lg\">Generate fual pass</button>\r\n                                                </div>:<></>}\r\n                                            </fieldset>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            @Shan\r\n                        </div>\r\n                    </div>) : (\r\n                        <PDF  image={file} onGoBack={onGoBack} />\r\n                    )\r\n                }\r\n            </>\r\n        );\r\n    \r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './components/Post';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Post />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}